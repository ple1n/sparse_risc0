use std::error::Error;

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{SPARSE_PROVER_ELF, SPARSE_PROVER_ID};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};
use tracing::info;

fn main() -> Result<(), Box<dyn Error>> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
    
    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // A default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    // let mut tree = SMT::new(true);
    // tree.add(n32(2), n32(3))?;
    // let proof = tree.create_proof(n32(3));

    let env = ExecutorEnv::builder().write(&32u64).unwrap().build()?;

    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, SPARSE_PROVER_ELF).unwrap();

    // extract the receipt.
    let mut receipt = prove_info.receipt;
    info!("{:?}", receipt);
    
    // For example:
    let output: () = receipt.journal.decode()?;
    // info!("{}", output);
    
    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(SPARSE_PROVER_ID).unwrap();
    info!("finished");

    Ok(())
}
