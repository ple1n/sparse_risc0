use std::error::Error;

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{SPARSE_PROVER_ELF, SPARSE_PROVER_ID};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};
use sha2::{Digest, Sha256};
use tracing::info;

use sparse_tree::{protocol::{ProofClaims, ProvingInput}, smt::SparseMerkleTree};

fn main() -> Result<(), Box<dyn Error>> {
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let mut leaves = vec![];
    for n in 0..10 {
        let mut s = [0; 32];
        s[0] = n;
        leaves.push(s);
    }
    let h = Sha256::new();
    let tree: SparseMerkleTree<[u8; 32], Sha256, 32> =
        SparseMerkleTree::new_sequential(&leaves, &h, [0; 32]).unwrap();
    let pt = tree.batch_prove(&[0, 2, 10]);
    let claim = ProofClaims { root: pt.root };
    let input = ProvingInput {
        pt,
        claim
    };
    let env = ExecutorEnv::builder().write(&input).unwrap().build()?;
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover.prove(env, SPARSE_PROVER_ELF).unwrap();

    // extract the receipt.
    let mut receipt = prove_info.receipt;
    info!("{:?}", receipt);

    // For example:
    let output: () = receipt.journal.decode()?;
    // info!("{}", output);

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(SPARSE_PROVER_ID).unwrap();
    info!("finished");

    Ok(())
}
